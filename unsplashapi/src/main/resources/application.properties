# 设置端口。部署到服务器后还是使用默认的 8080
server.port=8090
#指定bean所在包
mybatis.type-aliases-package=com.xuuuuu.unsplashapi.Pojo
#指定映射文件
mybatis.mapperLocations=classpath:mappers/*.xml

#分页插件,pagehelper
pagehelper.helperDialect=mysql
pagehelper.reasonable=true
pagehelper.supportMethodsArguments=true
pagehelper.params=count=countSql

#数据库连接池Druid
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
## MySQL
spring.datasource.url = jdbc:mysql://47.106.76.6:3306/alilocalhost?useUnicode=true&characterEncoding=utf8
spring.datasource.username = alilocalhost
spring.datasource.password = xc1071413971
spring.datasource.driver-class-name = com.mysql.jdbc.Driver
# 初始化大小，最小，最大
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=20
# 配置获取连接等待超时的时间
spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters=stat,wall,log4j
#logging.level.net.lemonsoft.coder_city=DEBUG
logging.level.com.xuuuuu.unsplashapi.Dao: DEBUG
# LOG4J配置
log4j.rootCategory=INFO, stdout

# 控制台输出
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %5p %c{1}:%L - %m%n
# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat=true
